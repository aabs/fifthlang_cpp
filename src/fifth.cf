entrypoints Fifth ;

FifthProgram. Fifth ::= [ModuleImport] [FunctionDeclaration] ;

ModImp.     ModuleImport ::= "use" PackageName ;
terminator nonempty ModuleImport ";" ;

FuncDecl.   FunctionDeclaration ::= FunctionName "(" [FormalParameter] ")" "=>" [Exp] ;
terminator nonempty FunctionDeclaration "." ;

FParam.     FormalParameter ::= ParamType ParamName ;
separator   FormalParameter "," ;

TParam.     ParamType ::= Ident ;
NParam.     ParamName ::= Ident ;
NFunc.      FunctionName ::= Ident ;
NPkg.       PackageName ::= Ident ;

EAdd.       Exp  ::= Exp  "+" Exp1 ;
ESub.       Exp  ::= Exp  "-" Exp1 ;
EMul.       Exp1 ::= Exp1 "*" Exp2 ;
EDiv.       Exp1 ::= Exp1 "/" Exp2 ;
EInt.       Exp2 ::= Integer ;
EDouble.    Exp2 ::= Double ;
EIdent.     Exp2 ::= Ident ;

separator   Exp ";" ;
coercions Exp 2;

comment "/*" "*/" ;
comment "//";
comment "#";

{-
relop
   : EQ
   | GT
   | LT
   ;

signed_atom
   : Plus signed_atom
   | Minus signed_atom
   | function_call
   | atom
   ;

function_call
   : function_name OpenParen expression (Comma expression)* CloseParen
   ;

variable: Identifier ;
atom
   : scientific
   | variable
   | OpenParen expression CloseParen
   ;

scientific
   : ScientificNumber
   ;


formal_parameters:
    parameter_declaration
    (Comma parameter_declaration)*
;

parameter_declaration:
    Identifier
    Identifier
;

parameter_type: Identifier;

parameter_name: Identifier;


OpenParen: '(';
CloseParen: ')';
Comma: ',';
LambdaSep: '=>';
Use: 'use';
Plus: '+';     // addition
Minus: '-';     // subtraction
Times: '*';     // multiplication
Divide: '/';     // division
Percent: '%';     // modulo
Power: '^' ;
EQ: '==';    // equal
NEQ: '!='    ;// not-equal
GT: '>'   ;  // greater-than
LT: '<'    ; // less-than
GEQ: '>='   ; // greater-or-equal
LEQ: '<='   ; // less-or-equal

And: '&&';    // intersection
Or: '||';     // union

Semicolon: ';' ;

Identifier: IdStart IdPart*;
IdStart: Letter | '_';
IdPart: IdStart | Digit;
TimeInterval: Nat [smhd];
Letter: [a-zA-Z];
Digit: [0-9];
PositiveDigit: [1-9];
Nat: PositiveDigit Digit*;
String:'"' (~["])* '"' 
     | '\'' (~['])* '\'';
Float: '-'? Int ('.' Digit+ )? Exp?;
Int: '0' | [1-9] [0-9]*;
Exp: [Ee] [+\-]? Int;
Ws: [ \t\n\r] + -> skip;

/////////////////////

VARIABLE
   : VALID_ID_START VALID_ID_CHAR*
   ;


fragment VALID_ID_START
   : ('a' .. 'z') | ('A' .. 'Z') | '_'
   ;


fragment VALID_ID_CHAR
   : VALID_ID_START | ('0' .. '9')
   ;


ScientificNumber
   : NUMBER ((E1 | E2) SIGN? NUMBER)?
   ;

fragment E1
   : 'E'
   ;


fragment E2
   : 'e'
   ;
fragment SIGN
   : ('+' | '-')
   ;
fragment NUMBER
   : ('0' .. '9') + ('.' ('0' .. '9') +)?
   ;




-}






{-
--  c grammar for expressions

Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp15 Assignment_op Exp2;
Econdition.  Exp3  ::= Exp4 "?" Exp ":" Exp3;
Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Ebitor.      Exp6  ::= Exp6 "|" Exp7;
Ebitexor.    Exp7  ::= Exp7 "^" Exp8;
Ebitand.     Exp8  ::= Exp8 "&" Exp9;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;
Eleft.       Exp11 ::= Exp11 "<<" Exp12;
Eright.      Exp11 ::= Exp11 ">>" Exp12;
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Emod.        Exp13 ::= Exp13 "%" Exp14;
Etypeconv.   Exp14 ::= "(" Type_name ")" Exp14;
Epreinc.     Exp15 ::= "++" Exp15;
Epredec.     Exp15 ::= "--" Exp15;
Epreop.      Exp15 ::= Unary_operator Exp14;
Ebytesexpr.  Exp15 ::= "sizeof" Exp15;
Ebytestype.  Exp15 ::= "sizeof" "(" Type_name ")";
Earray.      Exp16 ::= Exp16 "[" Exp "]" ;
Efunk.       Exp16 ::= Exp16 "(" ")";
Efunkpar.    Exp16 ::= Exp16 "(" [Exp2] ")";
Eselect.     Exp16 ::= Exp16 "." Ident;
Epoint.      Exp16 ::= Exp16 "->" Ident;
Epostinc.    Exp16 ::= Exp16 "++";
Epostdec.    Exp16 ::= Exp16 "--";
Evar.        Exp17 ::= Ident;
Econst.      Exp17 ::= Constant;
Estring.     Exp17 ::= String;

Efloat.        Constant ::= Double;
Echar.         Constant ::= Char;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecdouble.      Constant ::= CDouble;
Ecfloat.       Constant ::= CFloat;
Eclongdouble.  Constant ::= CLongDouble;
Eint.          Constant ::= Integer;

internal Elonger. Constant ::= Integer;
internal Edouble. Constant ::= Double;

Especial. Constant_expression ::= Exp3;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= Exp16 ;
_. Exp16 ::= Exp17 ;
_. Exp17 ::= "(" Exp ")" ;


Address.     Unary_operator ::= "&" ;
Indirection. Unary_operator ::= "*" ;
Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Complement.  Unary_operator ::= "~" ;
Logicalneg.  Unary_operator ::= "!" ;

(:[]).   [Exp2] ::= Exp2 ;
(:).     [Exp2] ::= Exp2 "," [Exp2];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignLeft.   Assignment_op ::= "<<=" ;
AssignRight.  Assignment_op ::= ">>=" ;
AssignAnd.    Assignment_op ::= "&=" ;
AssignXor.    Assignment_op ::= "^=" ;
AssignOr.     Assignment_op ::= "|=" ;
-}

